// 顶点着色器，用于处理顶点位置并计算出片段着色器中需要使用的纹理坐标。它计算了当前片段（或像素）相对于其左、右、上、下邻近像素的坐标（vL, vR, vT, vB）。这些信息通常用于模拟过程，如流体动力学、纹理处理或计算涡度等。

precision highp float;
precision mediump sampler2D;

// aPosition: 顶点位置，传递到顶点着色器的属性变量。通常这是标准的顶点坐标，范围是 [-1, 1]，表示屏幕空间中的位置。
// texelSize: 纹素大小，表示每个纹理元素（Texel）的大小，通常是 1.0 / textureWidth 和 1.0 / textureHeight，用于计算纹理坐标的偏移。
// vUv: 传递到片段着色器的纹理坐标，用于采样纹理。
// vL, vR, vT, vB: 分别表示当前片段的左、右、上、下邻居像素的纹理坐标，这些变量也传递到片段着色器。
attribute vec2 aPosition;
varying vec2 vUv;
varying vec2 vL;
varying vec2 vR;
varying vec2 vT;
varying vec2 vB;
uniform vec2 texelSize;
void main() {

// 计算纹理坐标 (vUv):
// 顶点坐标 aPosition 通常在 [-1, 1] 范围内，表示裁剪空间中的坐标。为了将其转换为纹理坐标系统，使用以下公式：
// aPosition * 0.5 将坐标范围从 [-1, 1] 缩放到 [ -0.5, 0.5]。
// + 0.5 将范围从 [ -0.5, 0.5] 平移到 [0.0, 1.0]，这是纹理坐标的标准范围。
// vUv 是最终的纹理坐标，在 [0, 1] 范围内，用于片段着色器中的纹理采样。
  vUv = aPosition * 0.5 + 0.5;
  // 计算邻近像素的纹理坐标:
  // vL, vR, vT, vB 分别表示当前纹理坐标 vUv 左、右、上、下相邻像素的纹理坐标。
// vL = vUv - vec2(texelSize.x, 0.0) 将纹理坐标沿 x 轴偏移一个纹素大小，得到左侧相邻像素的坐标。
// vR = vUv + vec2(texelSize.x, 0.0) 将纹理坐标沿 x 轴偏移一个纹素大小，得到右侧相邻像素的坐标。
// vT = vUv + vec2(0.0, texelSize.y) 将纹理坐标沿 y 轴偏移一个纹素大小，得到上方相邻像素的坐标。
// vB = vUv - vec2(0.0, texelSize.y) 将纹理坐标沿 y 轴偏移一个纹素大小，得到下方相邻像素的坐标。
// 这些计算的目的是为片段着色器提供邻近像素的坐标信息，以便在片段着色器中进行邻域采样。这些坐标通常用于像素级的差分计算或流体模拟中的涡度计算等场景。
  vL = vUv - vec2(texelSize.x, 0.0);
  vR = vUv + vec2(texelSize.x, 0.0);
  vT = vUv + vec2(0.0, texelSize.y);
  vB = vUv - vec2(0.0, texelSize.y);

  // 计算最终的顶点位置:
  // 最后，通过 gl_Position 将输入的顶点坐标 aPosition 转换为裁剪空间坐标。这是 OpenGL 渲染管线的标准操作，用于指定顶点的位置。
// 由于顶点坐标已经是裁剪空间坐标，所以 z 和 w 分量被设置为 0.0 和 1.0，这表示位置在二维平面内。
  gl_Position = vec4(aPosition, 0.0, 1.0);
}
// 整体效果:
// 纹理坐标计算: 通过转换和偏移，最终获得了当前片段的纹理坐标 vUv 以及其邻近像素（左、右、上、下）的纹理坐标 vL, vR, vT, vB。
// 片段着色器输入: 这些纹理坐标信息（vUv, vL, vR, vT, vB）将被传递到片段着色器中，用于邻域采样、计算差异或实现其他图像处理任务。
// 顶点处理: 顶点坐标被直接传递给 gl_Position，以便渲染管线能够正确绘制图形。
// 应用场景：
// 这段顶点着色器代码通常用于需要基于像素邻域进行计算的场景，例如：

// 流体模拟：在流体力学模拟中，邻近像素的坐标常常用于计算涡度或其他流体特性。
// 图像处理：在边缘检测、卷积运算等图像处理操作中，需要获取每个像素的邻域像素坐标。
// 碰撞检测：在物理模拟中，邻近像素的信息可以用于检测和处理碰撞。
// 通过计算当前像素及其邻近像素的纹理坐标，片段着色器能够高效地进行相应的物理或图像处理计算。